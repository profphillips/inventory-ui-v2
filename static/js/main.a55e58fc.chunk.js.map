{"version":3,"sources":["index.js"],"names":["NavBar","className","exact","activeClassName","to","path","App","About","useState","dataArray","setDataArray","buy","fav","qty","itemName","a","dbAddNewRow","newId","newRow","_id","name","updateRowBuy","row2update","updatedRow","updatedItems","map","row","dbUpdateRow","updateRowFav","updateRowQty","updateRowName","updateAll","removeRow","id2delete","filter","dbRemoveRow","useEffect","dbGetAllData","console","log","ColumnNames","InputForm","addNewRow","oneRow","ListRow","remove","updateFav","updateBuy","updateQty","updateName","Footer","useInputState","handleItemNameChange","resetItemNameField","handleQtyChange","resetQtyField","setBuy","setFav","textInput","React","createRef","onSubmit","e","preventDefault","current","focus","type","onChange","checked","value","placeholder","required","autoComplete","autoFocus","ref","handleNameChange","newBuy","newFav","id","onClick","initialVal","setValue","target","href","setRowDataArray","axios","get","then","response","data","payload","post","result","uri","put","myId","delete","deletedCount","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a55e58fc.chunk.js","sourcesContent":["// This React app is the user interface for maintaining a simple inventory\n// list. The design goal was to put all of the functions in a single file\n// to help study how they work.\n\n// Mongodb/Atlas storage is accessed via an api running on a Heroku server.\n// Both Atlas and Heroku are free accounts.\n\n// by John Phillips on 2021-02-24 revised 2021-02-25\n// v2 on 2021-03-19 revised 2021-04-04\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n// import { useRoutes, A } from \"hookrouter\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n} from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <NavBar />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// Routing\nexport default function NavBar() {\n  return (\n    <Router>\n      <ul className=\"navbar\">\n        <li className=\"nav-item\">\n          <NavLink\n            exact\n            className=\"nav-link\"\n            activeClassName=\"nav-active\"\n            to=\"/\"\n          >\n            Shop\n          </NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink\n            className=\"nav-link\"\n            activeClassName=\"nav-active\"\n            to=\"/print\"\n          >\n            Print\n          </NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink\n            className=\"nav-link\"\n            activeClassName=\"nav-active\"\n            to=\"/help\"\n          >\n            Help\n          </NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink\n            className=\"nav-link\"\n            activeClassName=\"nav-active\"\n            to=\"/about\"\n          >\n            About\n          </NavLink>\n        </li>\n      </ul>\n      <Switch>\n        <Route exact path=\"/\">\n          <App />\n        </Route>\n        <Route exact path=\"/print\">\n          <div>\n            <h1>Print</h1>\n          </div>\n        </Route>\n        <Route exact path=\"/help\">\n          <div>\n            <h1>Help</h1>\n          </div>\n        </Route>\n        <Route exact path=\"/about\">\n          <About />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\n//\n// ***** Main function *******************************************************\nfunction App() {\n  // Create a React state array and a function to change the data.\n  // dataArray contains all of our inventory data organized by row.\n  let [dataArray, setDataArray] = useState([]);\n\n  // On startup, retrieve inventory data from the db and place in our array.\n  useEffect(() => {\n    dbGetAllData(setDataArray);\n  }, []); // ignore warning - empty dependency array [] so only executed once\n\n  // Any time dataArray changes then this hook will automatically be called.\n  // Uncomment the following to console view the dataArray as it is updated.\n  useEffect(() => {\n    console.log(\"second useEffect runs whenever the dataArray changes\");\n    console.log(dataArray);\n  }, [dataArray]);\n\n  // Add a new row to db and get new id back; then add to array.\n  async function addNewRow(buy, fav, qty, itemName) {\n    const newId = await dbAddNewRow(buy, fav, qty, itemName);\n    const newRow = { _id: newId, buy: buy, fav: fav, qty: qty, name: itemName };\n    setDataArray([...dataArray, newRow]);\n  }\n\n  // When the buy checkbox is clicked update the array and then the db.\n  function updateRowBuy(row2update, buy) {\n    const updatedRow = {\n      _id: row2update._id,\n      buy: buy,\n      fav: row2update.fav,\n      qty: row2update.qty,\n      name: row2update.name,\n    };\n    // check each row for the matching id and if found return the updated row\n    const updatedItems = dataArray.map((row) => {\n      if (row._id === row2update._id) {\n        return updatedRow;\n      }\n      return row;\n    });\n    setDataArray(updatedItems);\n    dbUpdateRow(updatedRow);\n  }\n\n  // When the fav checkbox is clicked update the array and then the db.\n  function updateRowFav(row2update, fav) {\n    const updatedRow = {\n      _id: row2update._id,\n      buy: row2update.buy,\n      fav: fav,\n      qty: row2update.qty,\n      name: row2update.name,\n    };\n    const updatedItems = dataArray.map((row) => {\n      if (row._id === row2update._id) {\n        return updatedRow;\n      }\n      return row;\n    });\n    setDataArray(updatedItems);\n    dbUpdateRow(updatedRow);\n  }\n\n  // When the qty textbox is changed update the array and then the db.\n  function updateRowQty(row2update, qty) {\n    const updatedRow = {\n      _id: row2update._id,\n      buy: row2update.buy,\n      fav: row2update.fav,\n      qty: qty,\n      name: row2update.name,\n    };\n    const updatedItems = dataArray.map((row) => {\n      if (row._id === row2update._id) {\n        return updatedRow;\n      }\n      return row;\n    });\n    setDataArray(updatedItems);\n    dbUpdateRow(updatedRow);\n  }\n\n  // When the item name textbox is changed update the array and then the db.\n  function updateRowName(row2update, itemName) {\n    const updatedRow = {\n      _id: row2update._id,\n      buy: row2update.buy,\n      fav: row2update.fav,\n      qty: row2update.qty,\n      name: itemName,\n    };\n    const updatedItems = dataArray.map((row) => {\n      if (row._id === row2update._id) {\n        return updatedRow;\n      }\n      return row;\n    });\n    setDataArray(updatedItems);\n    dbUpdateRow(updatedRow);\n  }\n\n  // When the item name textbox is changed update the array and then the db.\n  function updateAll(row2update, buy, fav, qty, itemName) {\n    const updatedRow = {\n      _id: row2update._id,\n      buy: buy,\n      fav: fav,\n      qty: qty,\n      name: itemName,\n    };\n    const updatedItems = dataArray.map((row) => {\n      if (row._id === row2update._id) {\n        return updatedRow;\n      }\n      return row;\n    });\n    setDataArray(updatedItems);\n    dbUpdateRow(updatedRow);\n  }\n\n  // When the delete button is pressed update the array and then the db.\n  function removeRow(id2delete) {\n    // filter out any row where the ids don't match\n    const updatedItems = dataArray.filter((row) => row._id !== id2delete);\n    setDataArray(updatedItems);\n    dbRemoveRow(id2delete);\n  }\n\n  return (\n    <div>\n      <div className=\"wrapper\">\n        {/* <Navbar /> */}\n        <ColumnNames />\n        <InputForm addNewRow={addNewRow} className=\"InputForm\" />\n        {dataArray.map((oneRow) => (\n          <ListRow\n            key={oneRow._id}\n            oneRow={oneRow}\n            remove={removeRow}\n            updateFav={updateRowFav}\n            updateBuy={updateRowBuy}\n            updateQty={updateRowQty}\n            updateName={updateRowName}\n            updateAll={updateAll}\n          />\n        ))}\n        <Footer />\n      </div>\n    </div>\n  );\n}\n// ***** End Main function ***************************************************\n\n// Display the column names at the top of the grid/table\nfunction ColumnNames() {\n  return (\n    <div className=\"column-names-container\">\n      <div>Buy</div>\n      <div>Fav</div>\n      <div>Qty</div>\n      <div>Item Name</div>\n    </div>\n  );\n}\n\n// Display's empty checkboxes, qty, and item name text fields;\n// when submitted this adds a new row of data.\nfunction InputForm({ addNewRow }) {\n  const [name, handleItemNameChange, resetItemNameField] = useInputState(\"\");\n  const [qty, handleQtyChange, resetQtyField] = useInputState(\"1\");\n  const [buy, setBuy] = useState(false);\n  const [fav, setFav] = useState(false);\n\n  function handleBuyChange() {\n    setBuy(!buy);\n  }\n\n  function handleFavChange() {\n    setFav(!fav);\n  }\n\n  // next 2 lines enable the focus to return to the item name textbox\n  // after the 'add' button is clicked\n  const textInput = React.createRef();\n  const focus = () => textInput.current.focus();\n\n  return (\n    <>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          addNewRow(buy, fav, qty, name);\n          resetItemNameField();\n          resetQtyField();\n          setBuy(false);\n          setFav(false);\n          focus(); // returns focus to item name textbox after submit\n        }}\n      >\n        <div className=\"grid-container\">\n          <div>\n            <input\n              name=\"buy\"\n              type=\"checkbox\"\n              onChange={handleBuyChange}\n              checked={!!buy} // turn null into false and true stays true\n            />\n          </div>\n          <div>\n            <input\n              name=\"fav\"\n              type=\"checkbox\"\n              onChange={handleFavChange}\n              checked={!!fav}\n            />\n          </div>\n          <div>\n            <input\n              className=\"qty\"\n              name=\"qty\"\n              type=\"number\"\n              value={qty}\n              placeholder=\"Qty\"\n              onChange={handleQtyChange}\n              required={true}\n              autoComplete=\"off\"\n            />\n          </div>\n          <div>\n            <input\n              className=\"item-name\"\n              name=\"itemName\"\n              type=\"text\"\n              value={name}\n              placeholder=\"Type here then press plus\"\n              onChange={handleItemNameChange}\n              required={true}\n              autoComplete=\"off\"\n              autoFocus\n              ref={textInput} // returns focus to name textbox after submit\n            />\n          </div>\n          <div>\n            <button className=\"form-button\" name=\"addButton\" type=\"submit\">\n              ➕\n            </button>\n          </div>\n        </div>\n      </form>\n    </>\n  );\n}\n\n// Display a single row of editable data with a delete button.\nfunction ListRow({\n  oneRow,\n  remove,\n  updateBuy,\n  updateFav,\n  updateQty,\n  updateName,\n  updateAll,\n}) {\n  const [buy, setBuy] = useState(oneRow.buy);\n  const [fav, setFav] = useState(oneRow.fav);\n  const [qty, handleQtyChange] = useInputState(oneRow.qty);\n  const [name, handleNameChange] = useInputState(oneRow.name);\n\n  function handleBuyChange() {\n    const newBuy = !buy;\n    setBuy(newBuy);\n    updateBuy(oneRow, newBuy);\n  }\n\n  function handleFavChange() {\n    const newFav = !fav;\n    setFav(newFav);\n    updateFav(oneRow, newFav);\n  }\n\n  return (\n    <div className=\"grid-container\">\n      <div>\n        <input\n          name=\"cb-buy\"\n          type=\"checkbox\"\n          onChange={handleBuyChange}\n          checked={!!buy} // turn null into false and true stays true\n        />\n      </div>\n      <div>\n        <input\n          name=\"cb-fav\"\n          type=\"checkbox\"\n          onChange={handleFavChange}\n          checked={!!fav}\n        />\n      </div>\n      <div>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            updateQty(oneRow, qty);\n          }}\n        >\n          <input\n            id={oneRow._id + \"qty\"}\n            className=\"qty\"\n            name=\"qty\"\n            type=\"number\"\n            value={qty}\n            onChange={handleQtyChange}\n            required={true}\n            autoComplete=\"off\"\n          />\n        </form>\n      </div>\n      <div>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            updateName(oneRow, name);\n          }}\n        >\n          <input\n            id={oneRow._id + \"name\"}\n            className=\"item-name\"\n            name=\"name\"\n            type=\"text\"\n            value={name}\n            onChange={handleNameChange}\n            required={true}\n            autoComplete=\"off\"\n          />\n        </form>\n      </div>\n      <div>\n        <button\n          className=\"form-button-cloud\"\n          name=\"update\"\n          onClick={() => {\n            console.log(\"qty=\", qty);\n            updateAll(oneRow, buy, fav, qty, name);\n            // updateName(oneRow, name);\n          }}\n        >\n          ☁️\n        </button>\n        <button\n          className=\"form-button-delete\"\n          name=\"delete\"\n          onClick={() => remove(oneRow._id)}\n        >\n          🗑\n        </button>\n      </div>\n    </div>\n  );\n}\n\n// Utility functions to fill in a text field as the user types;\n// resets the text field to initialVal after the user presses enter\nfunction useInputState(initialVal) {\n  const [value, setValue] = useState(initialVal);\n  const handleChange = (e) => setValue(e.target.value);\n  const reset = () => setValue(initialVal);\n  return [value, handleChange, reset];\n}\n\n// Displays the navigation bar\n// function Navbar() {\n//   return (\n//     <div className=\"navbar\">\n//       <a href=\"#home\" className=\"active\">\n//         Inventory v2\n//       </a>\n//       <a href=\"#print\">Print</a>\n//       <a href=\"#sort\">Sort</a>\n//       <a href=\"#about\">About</a>\n//     </div>\n//   );\n// }\n\n// Displays the footer\nfunction Footer() {\n  return (\n    <>\n      <footer>\n        <h3>Directions</h3>\n        <p>\n          To add a new item click on the first row's \"Type here\" item name\n          field. Then either press enter or click the cloud icon to save. The\n          new item will appear at the bottom of the list.\n        </p>\n        <p>\n          To edit, click on any quantity or item name value that you want to\n          change. Make your change and then press enter before leaving that\n          field. If you are changing both the quantity and the item name then\n          click the cloud icon to save. Clicking on any checkbox automatically\n          saves the new setting.\n        </p>\n        <p>To delete a row click on the trash icon.</p>\n      </footer>\n    </>\n  );\n}\n\nfunction About() {\n  return (\n    <footer>\n      <h3 id=\"about\">About</h3>\n      Inventory user interface v2 by John Phillips on April 2, 2021.\n      <br />\n      <br />\n      Source{\" \"}\n      <a href=\"https://github.com/profphillips/inventory-ui-v2\">\n        https://github.com/profphillips/inventory-ui-v2\n      </a>\n      <br />\n      <br /> Live page{\" \"}\n      <a href=\"https://profphillips.github.io/inventory-ui-v2/\">\n        https://profphillips.github.io/inventory-ui-v2/\n      </a>\n      <br />\n      <br />\n      This program uses an api hosted at Heroku. The api uses a Mongodb Atlas\n      cloud database to store the data.\n      <br />\n      <br />\n      Source{\" \"}\n      <a href=\"https://github.com/profphillips/inventory-api-v2\">\n        https://github.com/profphillips/inventory-api-v2\n      </a>\n    </footer>\n  );\n}\n\n//\n// ***** API functions *******************************************************\n// These functions call the api running on a Heroku server\n// which carries out the desired interaction with a mongodb Atlas database.\n\nasync function dbGetAllData(setRowDataArray) {\n  await axios\n    .get(\"https://inventory-api-v2.herokuapp.com/items\")\n    .then((response) => {\n      setRowDataArray(response.data);\n    });\n}\n\nasync function dbAddNewRow(buy, fav, qty, itemName) {\n  const uri = \"https://inventory-api-v2.herokuapp.com/items\";\n  const payload = { buy: buy, fav: fav, qty: qty, name: itemName };\n  let result = await axios.post(uri, payload);\n  console.log(`db add new row res.data=${result.data}`);\n  return result.data;\n}\n\nasync function dbUpdateRow(row) {\n  const uri = \"https://inventory-api-v2.herokuapp.com/items/\" + row._id;\n  const payload = { buy: row.buy, fav: row.fav, qty: row.qty, name: row.name };\n  let result = await axios.put(uri, payload);\n  return result.data;\n}\n\nasync function dbRemoveRow(myId) {\n  const uri = \"https://inventory-api-v2.herokuapp.com/items/\" + myId;\n  let result = await axios.delete(uri);\n  console.log(`db remove=${result.data.deletedCount}`); // make sure it is 1\n  return result.data.deletedCount;\n}\n// ***** End API functions ***************************************************\n\n// ***** End Of File *********************************************************\n"],"sourceRoot":""}