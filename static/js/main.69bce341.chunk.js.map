{"version":3,"sources":["dbapi.js","footer.js","home.js","help.js","about.js","print.js","app.js","index.js"],"names":["dbGetAllData","setRowDataArray","a","axios","get","then","response","data","dbAddNewRow","buy","fav","qty","itemName","payload","name","post","result","console","log","row","uri","_id","put","myId","delete","deletedCount","Footer","Home","useState","dataArray","setDataArray","newId","newRow","updateAll","row2update","updatedRow","updatedItems","map","dbUpdateRow","removeRow","id2delete","filter","dbRemoveRow","useEffect","className","ColumnNames","InputForm","addNewRow","oneRow","ListRow","remove","useInputState","handleItemNameChange","resetItemNameField","handleQtyChange","resetQtyField","setBuy","setFav","textInput","React","createRef","onSubmit","e","preventDefault","current","focus","type","onChange","checked","value","placeholder","required","autoComplete","autoFocus","ref","handleNameChange","newBuy","newFav","id","onClick","initialVal","setValue","target","Help","About","href","Print","buyData","App","activeClassName","to","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69bce341.chunk.js","sourcesContent":["// ***** API functions *******************************************************\r\n// These functions call the api running on a Heroku server\r\n// which carries out the desired interaction with a mongodb Atlas database.\r\n\r\nimport axios from \"axios\";\r\n\r\nexport async function dbGetAllData(setRowDataArray) {\r\n  await axios\r\n    .get(\"https://inventory-api-v2.herokuapp.com/items\")\r\n    .then((response) => {\r\n      setRowDataArray(response.data);\r\n    });\r\n}\r\n\r\nexport async function dbAddNewRow(buy, fav, qty, itemName) {\r\n  const uri = \"https://inventory-api-v2.herokuapp.com/items\";\r\n  const payload = { buy: buy, fav: fav, qty: qty, name: itemName };\r\n  let result = await axios.post(uri, payload);\r\n  console.log(`db add new row res.data=${result.data}`);\r\n  return result.data;\r\n}\r\n\r\nexport async function dbUpdateRow(row) {\r\n  const uri = \"https://inventory-api-v2.herokuapp.com/items/\" + row._id;\r\n  const payload = { buy: row.buy, fav: row.fav, qty: row.qty, name: row.name };\r\n  let result = await axios.put(uri, payload);\r\n  return result.data;\r\n}\r\n\r\nexport async function dbRemoveRow(myId) {\r\n  const uri = \"https://inventory-api-v2.herokuapp.com/items/\" + myId;\r\n  let result = await axios.delete(uri);\r\n  console.log(`db remove=${result.data.deletedCount}`); // make sure it is 1\r\n  return result.data.deletedCount;\r\n}\r\n// ***** End API functions ***************************************************\r\n","export default function Footer() {\r\n  return (\r\n    <>\r\n      <footer>Inventory App by John Phillips 2021</footer>\r\n    </>\r\n  );\r\n}\r\n","// Displays the main inventory table.\r\n\r\n// by John Phillips on 2021-02-24 revised 2021-02-25\r\n// v2 on 2021-03-19 revised 2021-04-05\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { dbGetAllData, dbAddNewRow, dbUpdateRow, dbRemoveRow } from \"./dbapi\";\r\nimport Footer from \"./footer\";\r\n\r\n// ***** Main function *******************************************************\r\nexport default function Home() {\r\n  // Create a React state array and a function to change the data.\r\n  // dataArray contains all of our inventory data organized by row.\r\n  let [dataArray, setDataArray] = useState([]);\r\n\r\n  // On startup, retrieve inventory data from the db and place in our array.\r\n  useEffect(() => {\r\n    dbGetAllData(setDataArray);\r\n  }, []); // ignore warning - empty dependency array [] so only executed once\r\n\r\n  // Any time dataArray changes then this hook will automatically be called.\r\n  // Uncomment the following to console view the dataArray as it is updated.\r\n  useEffect(() => {\r\n    console.log(\"second useEffect runs whenever the dataArray changes\");\r\n    console.log(dataArray);\r\n  }, [dataArray]);\r\n\r\n  // Add a new row to db and get new id back; then add to array.\r\n  async function addNewRow(buy, fav, qty, itemName) {\r\n    const newId = await dbAddNewRow(buy, fav, qty, itemName);\r\n    const newRow = { _id: newId, buy: buy, fav: fav, qty: qty, name: itemName };\r\n    setDataArray([...dataArray, newRow]);\r\n  }\r\n\r\n  // When the item is changed update the array and then the db.\r\n  function updateAll(row2update, buy, fav, qty, itemName) {\r\n    const updatedRow = {\r\n      _id: row2update._id,\r\n      buy: buy,\r\n      fav: fav,\r\n      qty: qty,\r\n      name: itemName,\r\n    };\r\n    const updatedItems = dataArray.map((row) => {\r\n      if (row._id === row2update._id) {\r\n        return updatedRow;\r\n      }\r\n      return row;\r\n    });\r\n    setDataArray(updatedItems);\r\n    dbUpdateRow(updatedRow);\r\n  }\r\n\r\n  // When the delete button is pressed update the array and then the db.\r\n  function removeRow(id2delete) {\r\n    // filter out any row where the ids don't match\r\n    const updatedItems = dataArray.filter((row) => row._id !== id2delete);\r\n    setDataArray(updatedItems);\r\n    dbRemoveRow(id2delete);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"wrapper\">\r\n        <ColumnNames />\r\n        <InputForm addNewRow={addNewRow} className=\"InputForm\" />\r\n        {dataArray.map((oneRow) => (\r\n          <ListRow\r\n            key={oneRow._id}\r\n            oneRow={oneRow}\r\n            remove={removeRow}\r\n            updateAll={updateAll}\r\n          />\r\n        ))}\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n// ***** End Main function ***************************************************\r\n\r\n// Display the column names at the top of the grid/table\r\nfunction ColumnNames() {\r\n  return (\r\n    <div className=\"column-names-container\">\r\n      <div>Buy</div>\r\n      <div>Fav</div>\r\n      <div>Qty</div>\r\n      <div>Item Name</div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Display's empty checkboxes, qty, and item name text fields;\r\n// when submitted this adds a new row of data.\r\nfunction InputForm({ addNewRow }) {\r\n  const [name, handleItemNameChange, resetItemNameField] = useInputState(\"\");\r\n  const [qty, handleQtyChange, resetQtyField] = useInputState(\"1\");\r\n  const [buy, setBuy] = useState(false);\r\n  const [fav, setFav] = useState(false);\r\n\r\n  function handleBuyChange() {\r\n    setBuy(!buy);\r\n  }\r\n\r\n  function handleFavChange() {\r\n    setFav(!fav);\r\n  }\r\n\r\n  // next 2 lines enable the focus to return to the item name textbox\r\n  // after the 'add' button is clicked\r\n  const textInput = React.createRef();\r\n  const focus = () => textInput.current.focus();\r\n\r\n  return (\r\n    <>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          addNewRow(buy, fav, qty, name);\r\n          resetItemNameField();\r\n          resetQtyField();\r\n          setBuy(false);\r\n          setFav(false);\r\n          focus(); // returns focus to item name textbox after submit\r\n        }}\r\n      >\r\n        <div className=\"grid-container\">\r\n          <div>\r\n            <input\r\n              name=\"buy\"\r\n              type=\"checkbox\"\r\n              onChange={handleBuyChange}\r\n              checked={!!buy} // turn null into false and true stays true\r\n            />\r\n          </div>\r\n          <div>\r\n            <input\r\n              name=\"fav\"\r\n              type=\"checkbox\"\r\n              onChange={handleFavChange}\r\n              checked={!!fav}\r\n            />\r\n          </div>\r\n          <div>\r\n            <input\r\n              className=\"qty\"\r\n              name=\"qty\"\r\n              type=\"number\"\r\n              value={qty}\r\n              placeholder=\"Qty\"\r\n              onChange={handleQtyChange}\r\n              required={true}\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <input\r\n              className=\"item-name\"\r\n              name=\"itemName\"\r\n              type=\"text\"\r\n              value={name}\r\n              placeholder=\"Type here then press plus\"\r\n              onChange={handleItemNameChange}\r\n              required={true}\r\n              autoComplete=\"off\"\r\n              autoFocus\r\n              ref={textInput} // returns focus to name textbox after submit\r\n            />\r\n          </div>\r\n          <div>\r\n            <button className=\"form-button\" name=\"addButton\" type=\"submit\">\r\n              ➕\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\n// Display a single row of editable data with a delete button.\r\nfunction ListRow({\r\n  oneRow,\r\n  remove,\r\n  updateAll,\r\n}) {\r\n  const [buy, setBuy] = useState(oneRow.buy);\r\n  const [fav, setFav] = useState(oneRow.fav);\r\n  const [qty, handleQtyChange] = useInputState(oneRow.qty);\r\n  const [name, handleNameChange] = useInputState(oneRow.name);\r\n\r\n  function handleBuyChange() {\r\n    const newBuy = !buy;\r\n    setBuy(newBuy);\r\n    updateAll(oneRow, newBuy, fav, qty, name);\r\n  }\r\n\r\n  function handleFavChange() {\r\n    const newFav = !fav;\r\n    setFav(newFav);\r\n    updateAll(oneRow, buy, newFav, qty, name);\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      <div>\r\n        <input\r\n          name=\"cb-buy\"\r\n          type=\"checkbox\"\r\n          onChange={handleBuyChange}\r\n          checked={!!buy} // turn null into false and true stays true\r\n        />\r\n      </div>\r\n      <div>\r\n        <input\r\n          name=\"cb-fav\"\r\n          type=\"checkbox\"\r\n          onChange={handleFavChange}\r\n          checked={!!fav}\r\n        />\r\n      </div>\r\n      <div>\r\n        <form\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            updateAll(oneRow, buy, fav, qty, name);\r\n          }}\r\n        >\r\n          <input\r\n            id={oneRow._id + \"qty\"}\r\n            className=\"qty\"\r\n            name=\"qty\"\r\n            type=\"number\"\r\n            value={qty}\r\n            onChange={handleQtyChange}\r\n            required={true}\r\n            autoComplete=\"off\"\r\n          />\r\n        </form>\r\n      </div>\r\n      <div>\r\n        <form\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            updateAll(oneRow, buy, fav, qty, name);\r\n          }}\r\n        >\r\n          <input\r\n            id={oneRow._id + \"name\"}\r\n            className=\"item-name\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={handleNameChange}\r\n            required={true}\r\n            autoComplete=\"off\"\r\n          />\r\n        </form>\r\n      </div>\r\n      <div>\r\n        <button\r\n          className=\"form-button-cloud\"\r\n          name=\"update\"\r\n          onClick={() => {\r\n            console.log(\"qty=\", qty);\r\n            updateAll(oneRow, buy, fav, qty, name);\r\n          }}\r\n        >\r\n          ☁️\r\n        </button>\r\n        <button\r\n          className=\"form-button-delete\"\r\n          name=\"delete\"\r\n          onClick={() => remove(oneRow._id)}\r\n        >\r\n          🗑\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Utility functions to fill in a text field as the user types;\r\n// resets the text field to initialVal after the user presses enter\r\nfunction useInputState(initialVal) {\r\n  const [value, setValue] = useState(initialVal);\r\n  const handleChange = (e) => setValue(e.target.value);\r\n  const reset = () => setValue(initialVal);\r\n  return [value, handleChange, reset];\r\n}\r\n\r\n// ***** End Of File *********************************************************\r\n","import Footer from \"./footer\";\r\nexport default function Help() {\r\n  return (\r\n    <>\r\n      <section>\r\n        <h3>Directions</h3>\r\n        <p>\r\n          To add a new item click on the first row's \"Type here\" item name\r\n          field. Then either press enter or click the cloud icon to save. The\r\n          new item will appear at the bottom of the list.\r\n        </p>\r\n        <p>\r\n          To edit, click on any quantity or item name value that you want to\r\n          change. Make your change and then press enter before leaving that\r\n          field. If you are changing both the quantity and the item name then\r\n          click the cloud icon to save. Clicking on any checkbox automatically\r\n          saves the new setting.\r\n        </p>\r\n        <p>To delete a row click on the trash icon.</p>\r\n      </section>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n","import Footer from \"./footer\";\r\nexport default function About() {\r\n  return (\r\n    <>\r\n      <section>\r\n        <h3 id=\"about\">About</h3>\r\n        <p>Inventory user interface v2 by John Phillips on April 2, 2021.</p>\r\n        <p>\r\n          Source:{\" \"}\r\n          <a href=\"https://github.com/profphillips/inventory-ui-v2\">\r\n            https://github.com/profphillips/inventory-ui-v2\r\n          </a>\r\n        </p>\r\n        <p>\r\n          Live page:{\" \"}\r\n          <a href=\"https://profphillips.github.io/inventory-ui-v2/\">\r\n            https://profphillips.github.io/inventory-ui-v2/\r\n          </a>\r\n        </p>\r\n        <p>\r\n          This program uses an api hosted at Heroku. The api uses a Mongodb\r\n          Atlas cloud database to store the data.\r\n        </p>\r\n        <p>\r\n          Source:{\" \"}\r\n          <a href=\"https://github.com/profphillips/inventory-api-v2\">\r\n            https://github.com/profphillips/inventory-api-v2\r\n          </a>\r\n        </p>\r\n      </section>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { dbGetAllData } from \"./dbapi\";\r\nimport Footer from \"./footer\";\r\n\r\nexport default function Print() {\r\n  let [dataArray, setDataArray] = useState([]);\r\n\r\n  useEffect(() => {\r\n    dbGetAllData(setDataArray);\r\n  }, []); // ignore warning - empty dependency array [] so only executed once\r\n\r\n  useEffect(() => {\r\n    console.log(\"second useEffect runs whenever the dataArray changes\");\r\n    console.log(dataArray);\r\n  }, [dataArray]);\r\n\r\n  const buyData = dataArray.filter((row) => row.buy === true);\r\n  console.log(\"bd=\", buyData);\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <h3>Buy List</h3>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Qty</th>\r\n              <th>Item</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {buyData.map((oneRow) => {\r\n              return (\r\n                <tr key={oneRow._id}>\r\n                  <td>{oneRow.qty}</td>\r\n                  <td>{oneRow.name}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </section>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n","// This React app is the user interface for maintaining a simple inventory\r\n// list. The design goal was to put all of the functions in a single file\r\n// to help study how they work.\r\n\r\n// Mongodb/Atlas storage is accessed via an api running on a Heroku server.\r\n// Both Atlas and Heroku are free accounts.\r\n\r\n// by John Phillips on 2021-02-24 revised 2021-02-25\r\n// v2 on 2021-03-19 revised 2021-04-05\r\n\r\n// This file contains the navbar and routing for the app.\r\n\r\nimport React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  NavLink,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Home from \"./home\";\r\nimport Help from \"./help\";\r\nimport About from \"./about\";\r\nimport Print from \"./print\";\r\n\r\nexport default function App() {\r\n    return (\r\n      <Router>\r\n        <ul className=\"navbar\">\r\n          <li className=\"nav-item\">\r\n            <NavLink className=\"nav-link\" activeClassName=\"nav-active\" to=\"/home\">\r\n              Home\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <NavLink\r\n              className=\"nav-link\"\r\n              activeClassName=\"nav-active\"\r\n              to=\"/print\"\r\n            >\r\n              Print\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <NavLink className=\"nav-link\" activeClassName=\"nav-active\" to=\"/help\">\r\n              Help\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <NavLink\r\n              className=\"nav-link\"\r\n              activeClassName=\"nav-active\"\r\n              to=\"/about\"\r\n            >\r\n              About\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n        <Switch>\r\n          <Route exact path=\"/print\">\r\n            <Print />\r\n          </Route>\r\n          <Route exact path=\"/help\">\r\n            <Help />\r\n          </Route>\r\n          <Route exact path=\"/about\">\r\n            <About />\r\n          </Route>\r\n          <Route exact path=\"/home\">\r\n            <Home />\r\n          </Route>\r\n          <Route exact path=\"/inventory-ui-v2\">\r\n            <Redirect to=\"/home\" />\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n            <Redirect to=\"/home\" />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }","// This React app is the user interface for maintaining a simple inventory\n// list.\n\n// Mongodb/Atlas storage is accessed via an api running on a Heroku server.\n// Both Atlas and Heroku are free accounts.\n\n// by John Phillips on 2021-02-24 revised 2021-02-25\n// v2 on 2021-03-19 revised 2021-04-05\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./app\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}