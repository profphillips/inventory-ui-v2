{"version":3,"sources":["index.js"],"names":["NavBar","className","exact","activeClassName","to","path","App","About","useState","dataArray","setDataArray","buy","fav","qty","itemName","a","dbAddNewRow","newId","newRow","_id","name","updateRowBuy","row2update","updatedRow","updatedItems","map","row","dbUpdateRow","updateRowFav","updateRowQty","updateRowName","removeRow","id2delete","filter","dbRemoveRow","useEffect","dbGetAllData","console","log","ColumnNames","InputForm","addNewRow","oneRow","ListRow","remove","updateFav","updateBuy","updateQty","updateName","useInputState","handleItemNameChange","resetItemNameField","handleQtyChange","resetQtyField","setBuy","setFav","textInput","React","createRef","onSubmit","e","preventDefault","current","focus","type","onChange","checked","value","placeholder","autoFocus","ref","handleNameChange","newBuy","newFav","onClick","initialVal","setValue","target","id","href","setRowDataArray","axios","get","then","response","data","payload","post","result","uri","put","myId","delete","deletedCount","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac82a5bd.chunk.js","sourcesContent":["// This React app is the user interface for maintaining a simple inventory\n// list. The design goal was to put all of the functions in a single file\n// to help study how they work.\n\n// Mongodb/Atlas storage is accessed via an api running on a Heroku server.\n// Both Atlas and Heroku are free accounts.\n\n// by John Phillips on 2021-02-24 revised 2021-02-25\n// v2 on 2021-03-19 revised 2021-04-03\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n// import { useRoutes, A } from \"hookrouter\";\nimport { BrowserRouter as Router, Switch, Route, NavLink } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <NavBar />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// Routing\nexport default function NavBar() {\nreturn (\n    <Router>\n      {/* <div > */}\n        <ul className=\"navbar\">\n          <li className=\"nav-item\">\n            <NavLink exact className=\"nav-link\" activeClassName=\"nav-active\" to=\"/\">\n              Shop\n            </NavLink>\n          </li>\n\n          <li className=\"nav-item\">\n            <NavLink className=\"nav-link\" activeClassName=\"nav-active\" to=\"/print\">\n              Print\n            </NavLink>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink className=\"nav-link\" activeClassName=\"nav-active\" to=\"/about\">\n              About\n            </NavLink>\n          </li>\n        </ul>\n\n        {/* <hr /> */}\n\n        <Switch>\n          <Route exact path=\"/\">\n            <App />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/print\">\n            <div>\n            <h1>Print</h1>\n            </div>\n          </Route>\n        </Switch>\n      {/* </div> */}\n    </Router>\n  );\n}\n\n//\n// ***** Main function *******************************************************\nfunction App() {\n  // Create a React state array and a function to change the data.\n  // dataArray contains all of our inventory data organized by row.\n  let [dataArray, setDataArray] = useState([]);\n\n  // On startup, retrieve inventory data from the db and place in our array.\n  useEffect(() => {\n    dbGetAllData(setDataArray);\n  }, []); // ignore warning - empty dependency array [] so only executed once\n\n  // Any time dataArray changes then this hook will automatically be called.\n  // Uncomment the following to console view the dataArray as it is updated.\n  useEffect(() => {\n    console.log(\"second useEffect runs whenever the dataArray changes\");\n    console.log(dataArray);\n  }, [dataArray]);\n\n  // Add a new row to db and get new id back; then add to array.\n  async function addNewRow(buy, fav, qty, itemName) {\n    const newId = await dbAddNewRow(buy, fav, qty, itemName);\n    const newRow = { _id: newId, buy: buy, fav: fav, qty: qty, name: itemName };\n    setDataArray([...dataArray, newRow]);\n  }\n\n  // When the buy checkbox is clicked update the array and then the db.\n  function updateRowBuy(row2update, buy) {\n    const updatedRow = {\n      _id: row2update._id,\n      buy: buy,\n      fav: row2update.fav,\n      qty: row2update.qty,\n      name: row2update.name,\n    };\n    // check each row for the matching id and if found return the updated row\n    const updatedItems = dataArray.map((row) => {\n      if (row._id === row2update._id) {\n        return updatedRow;\n      }\n      return row;\n    });\n    setDataArray(updatedItems);\n    dbUpdateRow(updatedRow);\n  }\n\n  // When the fav checkbox is clicked update the array and then the db.\n  function updateRowFav(row2update, fav) {\n    const updatedRow = {\n      _id: row2update._id,\n      buy: row2update.buy,\n      fav: fav,\n      qty: row2update.qty,\n      name: row2update.name,\n    };\n    const updatedItems = dataArray.map((row) => {\n      if (row._id === row2update._id) {\n        return updatedRow;\n      }\n      return row;\n    });\n    setDataArray(updatedItems);\n    dbUpdateRow(updatedRow);\n  }\n\n  // When the qty textbox is changed update the array and then the db.\n  function updateRowQty(row2update, qty) {\n    const updatedRow = {\n      _id: row2update._id,\n      buy: row2update.buy,\n      fav: row2update.fav,\n      qty: qty,\n      name: row2update.name,\n    };\n    const updatedItems = dataArray.map((row) => {\n      if (row._id === row2update._id) {\n        return updatedRow;\n      }\n      return row;\n    });\n    setDataArray(updatedItems);\n    dbUpdateRow(updatedRow);\n  }\n\n  // When the item name textbox is changed update the array and then the db.\n  function updateRowName(row2update, itemName) {\n    const updatedRow = {\n      _id: row2update._id,\n      buy: row2update.buy,\n      fav: row2update.fav,\n      qty: row2update.qty,\n      name: itemName,\n    };\n    const updatedItems = dataArray.map((row) => {\n      if (row._id === row2update._id) {\n        return updatedRow;\n      }\n      return row;\n    });\n    setDataArray(updatedItems);\n    dbUpdateRow(updatedRow);\n  }\n\n  // When the delete button is pressed update the array and then the db.\n  function removeRow(id2delete) {\n    // filter out any row where the ids don't match\n    const updatedItems = dataArray.filter((row) => row._id !== id2delete);\n    setDataArray(updatedItems);\n    dbRemoveRow(id2delete);\n  }\n\n  return (\n    <div>\n      <div className=\"wrapper\">\n        {/* <Navbar /> */}\n        <ColumnNames />\n        <InputForm addNewRow={addNewRow} className=\"InputForm\" />\n        {dataArray.map((oneRow) => (\n          <ListRow\n            key={oneRow._id}\n            oneRow={oneRow}\n            remove={removeRow}\n            updateFav={updateRowFav}\n            updateBuy={updateRowBuy}\n            updateQty={updateRowQty}\n            updateName={updateRowName}\n          />\n        ))}\n        {/* <Footer /> */}\n      </div>\n    </div>\n  );\n}\n// ***** End Main function ***************************************************\n\n// Display the column names at the top of the grid/table\nfunction ColumnNames() {\n  return (\n    <div className=\"column-names-container\">\n      <div>Buy</div>\n      <div>Fav</div>\n      <div>Qty</div>\n      <div>Item Name</div>\n    </div>\n  );\n}\n\n// Display's empty checkboxes, qty, and item name text fields;\n// when submitted this adds a new row of data.\nfunction InputForm({ addNewRow }) {\n  const [name, handleItemNameChange, resetItemNameField] = useInputState(\"\");\n  const [qty, handleQtyChange, resetQtyField] = useInputState(\"1\");\n  const [buy, setBuy] = useState(false);\n  const [fav, setFav] = useState(false);\n\n  function handleBuyChange() {\n    setBuy(!buy);\n  }\n\n  function handleFavChange() {\n    setFav(!fav);\n  }\n\n  // next 2 lines enable the focus to return to the item name textbox\n  // after the 'add' button is clicked\n  const textInput = React.createRef();\n  const focus = () => textInput.current.focus();\n\n  return (\n    <>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          addNewRow(buy, fav, qty, name);\n          resetItemNameField();\n          resetQtyField();\n          setBuy(false);\n          setFav(false);\n          focus(); // returns focus to item name textbox after submit\n        }}\n      >\n        <div className=\"grid-container\">\n          <div>\n            <input\n              name=\"buy\"\n              type=\"checkbox\"\n              onChange={handleBuyChange}\n              checked={!!buy} // turn null into false and true stays true\n            />\n          </div>\n          <div>\n            <input\n              name=\"fav\"\n              type=\"checkbox\"\n              onChange={handleFavChange}\n              checked={!!fav}\n            />\n          </div>\n          <div>\n            <input\n              className=\"qty\"\n              name=\"qty\"\n              type=\"text\"\n              value={qty}\n              placeholder=\"Qty\"\n              onChange={handleQtyChange}\n            />\n          </div>\n          <div>\n            <input\n              className=\"item-name\"\n              name=\"itemName\"\n              type=\"text\"\n              value={name}\n              placeholder=\"New Item\"\n              onChange={handleItemNameChange}\n              autoFocus\n              ref={textInput} // returns focus to name textbox after submit\n            />\n          </div>\n          <div>\n            <button className=\"form-button\" name=\"addButton\" type=\"submit\">\n              Add\n            </button>\n          </div>\n        </div>\n      </form>\n    </>\n  );\n}\n\n// Display a single row of editable data with a delete button.\nfunction ListRow({\n  oneRow,\n  remove,\n  updateBuy,\n  updateFav,\n  updateQty,\n  updateName,\n}) {\n  const [buy, setBuy] = useState(oneRow.buy);\n  const [fav, setFav] = useState(oneRow.fav);\n  const [qty, handleQtyChange] = useInputState(oneRow.qty);\n  const [name, handleNameChange] = useInputState(oneRow.name);\n\n  function handleBuyChange() {\n    const newBuy = !buy;\n    setBuy(newBuy);\n    updateBuy(oneRow, newBuy);\n  }\n\n  function handleFavChange() {\n    const newFav = !fav;\n    setFav(newFav);\n    updateFav(oneRow, newFav);\n  }\n\n  return (\n    <div className=\"grid-container\">\n      <div>\n        <input\n          name=\"cb-buy\"\n          type=\"checkbox\"\n          onChange={handleBuyChange}\n          checked={!!buy} // turn null into false and true stays true\n        />\n      </div>\n      <div>\n        <input\n          name=\"cb-fav\"\n          type=\"checkbox\"\n          onChange={handleFavChange}\n          checked={!!fav}\n        />\n      </div>\n      <div>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            updateQty(oneRow, qty);\n          }}\n        >\n          <input\n            className=\"qty\"\n            name=\"qty\"\n            type=\"text\"\n            value={qty}\n            onChange={handleQtyChange}\n          />\n        </form>\n      </div>\n      <div>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            updateName(oneRow, name);\n          }}\n        >\n          <input\n            className=\"item-name\"\n            name=\"name\"\n            type=\"text\"\n            value={name}\n            onChange={handleNameChange}\n          />\n        </form>\n      </div>\n      <div>\n        <button\n          className=\"form-button\"\n          name=\"delete\"\n          onClick={() => remove(oneRow._id)}\n        >\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n}\n\n// Utility functions to fill in a text field as the user types;\n// resets the text field to initialVal after the user presses enter\nfunction useInputState(initialVal) {\n  const [value, setValue] = useState(initialVal);\n  const handleChange = (e) => setValue(e.target.value);\n  const reset = () => setValue(initialVal);\n  return [value, handleChange, reset];\n}\n\n// Displays the navigation bar\n// function Navbar() {\n//   return (\n//     <div className=\"navbar\">\n//       <a href=\"#home\" className=\"active\">\n//         Inventory v2\n//       </a>\n//       <a href=\"#print\">Print</a>\n//       <a href=\"#sort\">Sort</a>\n//       <a href=\"#about\">About</a>\n//     </div>\n//   );\n// }\n\n// Displays the footer with About information\nfunction About() {\n  return (\n    <footer>\n      <h3 id=\"about\">About</h3>\n      Inventory user interface v2 by John Phillips on April 2, 2021.\n      <br />\n      <br />\n      Source{\" \"}\n      <a href=\"https://github.com/profphillips/inventory-ui-v2\">\n        https://github.com/profphillips/inventory-ui-v2\n      </a>\n      <br />\n      <br /> Live page{\" \"}\n      <a href=\"https://profphillips.github.io/inventory-ui-v2/\">\n        https://profphillips.github.io/inventory-ui-v2/\n      </a>\n      <br />\n      <br />\n      This program uses an api hosted at Heroku. The api uses a Mongodb Atlas\n      cloud database to store the data.\n      <br />\n      <br />\n      Source{\" \"}\n      <a href=\"https://github.com/profphillips/inventory-api-v2\">\n        https://github.com/profphillips/inventory-api-v2\n      </a>\n    </footer>\n  );\n}\n\n//\n// ***** API functions *******************************************************\n// These functions call the api running on a Heroku server\n// which carries out the desired interaction with a mongodb Atlas database.\n\nasync function dbGetAllData(setRowDataArray) {\n  await axios\n    .get(\"https://inventory-api-v2.herokuapp.com/items\")\n    .then((response) => {\n      setRowDataArray(response.data);\n    });\n}\n\nasync function dbAddNewRow(buy, fav, qty, itemName) {\n  const uri = \"https://inventory-api-v2.herokuapp.com/items\";\n  const payload = { buy: buy, fav: fav, qty: qty, name: itemName };\n  let result = await axios.post(uri, payload);\n  console.log(`db add new row res.data=${result.data}`);\n  return result.data;\n}\n\nasync function dbUpdateRow(row) {\n  const uri = \"https://inventory-api-v2.herokuapp.com/items/\" + row._id;\n  const payload = { buy: row.buy, fav: row.fav, qty: row.qty, name: row.name };\n  let result = await axios.put(uri, payload);\n  return result.data;\n}\n\nasync function dbRemoveRow(myId) {\n  const uri = \"https://inventory-api-v2.herokuapp.com/items/\" + myId;\n  let result = await axios.delete(uri);\n  console.log(`db remove=${result.data.deletedCount}`); // make sure it is 1\n  return result.data.deletedCount;\n}\n// ***** End API functions ***************************************************\n\n// ***** End Of File *********************************************************\n"],"sourceRoot":""}